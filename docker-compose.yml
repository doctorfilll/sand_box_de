# IP list:
# |NAME              |IP          |PORT|LOGIN    |PASSWORD|
# |------------------+------------+----+---------+--------+
# |dwh_pg            |10.19.88.101|5432|tech_load|dwh88   |
# |dwh_minio         |10.19.88.102|9000|tech_load|dwh12345|
# |dwh_click         |10.19.88.103|8123|tech_load|dwh88   |
# |airflow_webserver |10.19.88.104|8080|airflow  |airflow |
# |zookeeper         |10.19.88.105|2181|         |        |
# |kafka             |10.19.88.106|9092|tech_load|dwh88   |
# |hadoop            |10.19.88.107|9870|         |        |
# |hadoop            |10.19.88.107|9009|         |        |
# |hadoop            |10.19.88.107|9864|         |        |
# |jupiterhub_pyspark|10.19.88.108|8888|         |8f293bafa3f498e7d6a8a09baa58cc2290115e95|
# |superset_app      |10.19.88.109|8088|tech_load|dwh88   |
# |grafana           |10.19.88.110|3000|tech_load|dwh88   |
# |trino             |10.19.88.114|8081|admin    |        |
# |mariadb           |10.19.88.112|3306|admin    |admin   |
# |hive-metastore    |10.19.88.113|9083|         |        |

# Запуск проекта sandbox_db:
# mkdir -p ./services/volume/{airflow/{dags,logs,plugins,config},postgres,minio} 
# mkdir -p ./services/configs/{airflow,hadoop,jupiterhub}
# mkdir -p ./services/datasets
# sudo chmod -R 777 ./services/
# echo -e "AIRFLOW_UID=$(id -u)" > ./services/configs/airflow/env
# sudo docker compose up airflow-init
# sudo docker compose up -d
#
# Удаление проекта sandbox_db
# sudo docker compose down
#
# full delete sandbox_db
# docker compose down --volumes --rmi all
#
# airflow control settings
# curl -Lf 'https://airflow.apache.org/docs/apache-airflow/2.10.5/airflow.sh' -o ./services/configs/airflow/airflow.sh
# chmod +x ./services/configs/airflow/airflow.sh
# airflow cli command
# ./services/configs/airflow/airflow.sh info
# ./services/configs/airflow/airflow.sh sheduller



services:
  postgres_dwh:
    image: postgres:17.0-alpine
    hostname: postgres_dwh
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"

    container_name: dwh_pg
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: dwh
      POSTGRES_USER: tech_load
      POSTGRES_PASSWORD: dwh88
      # PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./services/datasets:/datasets
      - ./services/volume/postgres:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tech_load -d dwh"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      golos_tech:
        ipv4_address: 10.19.88.101

  trino-coordinator:
    image: 'trinodb/trino:latest'
    hostname: trino-coordinator
    # restart: always
    ports:
      - '8081:8080'
    volumes:
      - ./services/configs/trino:/etc/trino
    networks:
      golos_tech:
        ipv4_address: 10.19.88.114

  mariadb:
    image: 'mariadb:latest'
    hostname: mariadb
    restart: always
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db
    networks:
      golos_tech:
        ipv4_address: 10.19.88.112

  hive-metastore:
    hostname: hive-metastore
    restart: always
    image: 'bitsondatadev/hive-metastore:latest'
    ports:
      - '9083:9083'
    volumes:
      - ./services/configs/hive-metastore/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
    depends_on:
      - mariadb
    networks:
      golos_tech:
        ipv4_address: 10.19.88.113

  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: tech_load
      MINIO_ROOT_PASSWORD: dwh12345
      MINIO_ACCESS_KEY: tech_load
      MINIO_SECRET_KEY: dwh12345
      MINIO_VOLUMES: /mnt/data
    volumes:
      - ./services/volume/minio:/mnt/data
      - ./services/datasets:/datasets
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    command: server /mnt/data  --console-address ":9001"
    networks:
      golos_tech:
        ipv4_address: 10.19.88.102

  minio-setup:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    environment:
      - MINIO_ACCESS_KEY=tech_load
      - MINIO_SECRET_KEY=dwh12345
    networks:
      golos_tech:
    volumes:
      - ./services/volume/minio:/mnt/data
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://10.19.88.102:9000 tech_load dwh12345) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/datalake;
      /usr/bin/mc mb minio/datalake;
      /usr/bin/mc policy set public minio/datalake;
      exit 0;
      "   

  click_server:
    image: clickhouse/clickhouse-server:24.8.4
    hostname: clickhouse
    container_name: dwh_click
    restart: always
    ports:
      - "8123:8123"
    environment:
      CLICKHOUSE_DB: dwh
      CLICKHOUSE_USER: tech_load
      CLICKHOUSE_PASSWORD: dwh88
    volumes:
      - ./services/volume/clickhouse:/var/lib/clickhouse
      - ./services/datasets:/datasets
    networks:
      golos_tech:
        ipv4_address: 10.19.88.103

  zookeeper:
    image: 'bitnami/zookeeper:3.9.3'
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      golos_tech:
        ipv4_address: 10.19.88.105

  kafka:
    image: 'bitnami/kafka:3.9.0'
    container_name: kafka
    restart: always
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CLIENT_USERS=tech_load
      - KAFKA_CLIENT_PASSWORDS=dwh88
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      golos_tech:
        ipv4_address: 10.19.88.106

  hadoop:
    image: neshkeev/hadoop
    container_name: hadoop
    restart: always
    hostname: hadoop
    ports:
      - "9870:9870"
      - "9009:9009"
      - "9864:9864"
    volumes:
      - ./services/configs/hadoop/hdfs-site.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
      - ./services/configs/hadoop/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      - ./services/datasets:/datasets
    networks:
      golos_tech:
        ipv4_address: 10.19.88.107

  pyspark:
    image: jupyter/pyspark-notebook
    container_name: jupiterhub_pyspark
    restart: always
    hostname: jupiterhub_pyspark
    ports:
      - "8888:8888"
      - "4040:4040"
      - "4041:4041"
    volumes:
      - ./services/volume/jupiterhub:/home/jovyan/notebooks
      - ./services/datasets:/datasets
      - ./services/configs/jupiterhub/jupyter_server_config.py:/home/jovyan/.jupyter/jupyter_server_config.py
    networks:
      golos_tech:
        ipv4_address: 10.19.88.108

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - TERM=linux
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-polystat-panel
      - GF_SECURITY_ADMIN_USER=tech_load
      - GF_SECURITY_ADMIN_PASSWORD=dwh88
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - '3000:3000'
    volumes:
      - /services/volume/grafana:/var/lib/grafana
    user: '0'
    networks:
      golos_tech:
        ipv4_address: 10.19.88.110

---
# Общие настройки для airflow для инициализации
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.5}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW_UID: '"${AIRFLOW_UID:-50000}:0"'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-./services/volume/airflow}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-./services/volume/airflow}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-./services/volume/airflow}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-./services/volume/airflow}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    container_name: airflow_metadata_pg
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      golos_tech:

  redis:
    # redis - используется в superset и airflow
    image: redis:7.2-bookworm
    container_name: redis_cache
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    volumes:
      - redis:/data
    networks:
      golos_tech:

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      golos_tech:
        ipv4_address: 10.19.88.104

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      golos_tech:

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      golos_tech:

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      golos_tech:

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID:-50000}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-./services/volume/airflow}:/sources
      - ./services/datasets:/sources/datasets
    networks:
      - golos_tech

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    networks:
      golos_tech:

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    container_name: airflow-flower
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      golos_tech:

# Superset - эта часть относится только к Superset
  db:
    env_file:
      - path: ./services/configs/superset/.env # default
        required: true
    image: postgres:15
    container_name: superset_metadata_pg
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./services/volume/superset/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      golos_tech:

  superset:
    env_file:
      - path: ./services/configs/superset/.env  # default
        required: true
    image: apachesuperset.docker.scarf.sh/apache/superset:latest-dev
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    depends_on:
      superset-init:
        condition: service_completed_successfully
    volumes:
      - ./services/configs/superset:/app/docker
      - ./services/volume/superset:/app/superset_home
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
    networks:
      golos_tech:
        ipv4_address: 10.19.88.109

  superset-init:
    image: apachesuperset.docker.scarf.sh/apache/superset:latest-dev
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: ./services/configs/superset/.env  # default
        required: true
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    user: "root"
    volumes:
      - ./services/configs/superset:/app/docker
      - ./services/volume/superset:/app/superset_home
    healthcheck:
      disable: true
    environment:
      SUPERSET_LOAD_EXAMPLES: "${SUPERSET_LOAD_EXAMPLES:-yes}"
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
    networks:
      golos_tech:

  superset-worker:
    image: apachesuperset.docker.scarf.sh/apache/superset:latest-dev
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file:
      - path: ./services/configs/superset/.env  # default
        required: true
    restart: unless-stopped
    depends_on:
      superset-init:
        condition: service_completed_successfully
    user: "root"
    volumes:
      - ./services/configs/superset:/app/docker
      - ./services/volume/superset:/app/superset_home
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
    networks:
      golos_tech:

  superset-worker-beat:
    image: apachesuperset.docker.scarf.sh/apache/superset:latest-dev
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file:
      - path: ./services/configs/superset/.env  # default
        required: true
    restart: unless-stopped
    depends_on:
      superset-init:
        condition: service_completed_successfully
    user: "root"
    volumes:
      - ./services/configs/superset:/app/docker
      - ./services/volume/superset:/app/superset_home
    healthcheck:
      disable: true
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
    networks:
      golos_tech:



networks:
  golos_tech:
    driver: bridge
    ipam:
      config:
        - subnet: 10.19.88.0/24


volumes:
  postgres-db-volume:
    external: false
  redis:
    external: false
  db_home:
    external: false